pipeline {
    agent any

        tools {
        maven 'maven'
        }

    environment {
            SCANNER_HOME = tool 'sonar'
            registry = 'muzafferjoya/sp-boot-poc'
            registryCredential = 'muzaffar-docker-hub'
            dockerImage = ''
    }

    stages {
                stage('Clean Workspace') {
            steps {
                cleanWs()
            }
                }

        stage('Git Checkout') {
            steps {
                git branch: 'master', changelog: false, poll: false, url: 'https://github.com/muzafferjoya/spring-boot-docker-poc.git'
            }
        }

        stage('Maven Compile Test Packging') {
            steps {
                sh 'mvn -B -f pom.xml clean package -DskipTests'
            }
        }

        // stage("Compile"){
        //     steps{
        //         sh "mvn clean compile"
        //     }
        // }

        //  stage("Test Cases"){
        //     steps{
        //         sh "mvn test"
        //     }
        // }

        stage('Sonarqube Analysis ') {
            steps {
                withSonarQubeEnv('sonar-scanner') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=sp-boot-poc \
                    -Dsonar.java.binaries=. \
                    -Dsonar.projectKey=sp-boot-poc '''
                }
            }
        }

        stage('OWASP Dependency Check') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ ' , odcInstallation: 'DP'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        // stage("Build"){
        //     steps{
        //         sh " mvn clean install"
        //     }
        // }
        stage('Building image') {
            steps {
                script {
                    dockerImage = docker.build registry + ":$BUILD_NUMBER"
                }
            }
        }
        stage('Docker scan with TRIVY') {
            steps {
                script {
                    sh("docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $PWD:/tmp/.cache/ aquasec/trivy:0.10.0 ${registry}:latest")
                }
            }
        }
        stage('Explore Image Layers with DIVE') {
            steps {
                script {
                    sh "docker run --rm -i \
                        -v /var/run/docker.sock:/var/run/docker.sock \
                        wagoodman/dive:latest --ci ${registry}:latest --lowestEfficiency=0.8 --highestUserWastedPercent=0.45"
                }
            }
        }

        stage('Push Image To Docker Hub') {
            steps {
                script {
                    docker.withRegistry('', registryCredential) {
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('latest')
                    }
                }
            }
        }
        stage('Clean docker images') {
            steps {
                echo 'Cleaning the docker images'
                sh 'docker rmi ${registry}:latest'
                sh 'docker rmi ${registry}:$BUILD_NUMBER'
            }
        }
                stage ('Trigger cd pipeline') {
            steps {  
                echo 'Triggering cd pipeline' 
                script {
                        sh """
                            curl http://44.197.183.208:8080/job/K8S-Cluster/job/sp-boot-poc-cd/?token=argocd \
                                --user master:116f36eeaac7c934023a60bd73fe3760e7 \
                                --data BUILD_NUMBER=${BUILD_NUMBER} --data verbosity=high \
                                -H content-type:application/x-www-form-urlencoded \
                                -H cache-control:no-cache
                            """
                    }
                }
        } 



    //  stage('Remote Server Test Connections') {
    //     steps {
    //         sshagent(['target-server']) {
    //             sh "ssh -o StrictHostKeyChecking=no ubuntu@172.31.65.9"
    //             sh "whoami"
    //             //sh 'scp gile.txt ubuntu@172.31.65.9:/home/ubuntu/'
    //         }
    //     }
    // }
    }
}
